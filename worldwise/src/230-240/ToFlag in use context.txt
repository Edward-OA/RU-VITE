function CitiesProvider({children}){
    const [cities, setCities] = useState([])
    const [isLoading, setIsLoading] = useState(false)
    const [currentCity, setCurrentCity] = useState({})
    
 
    useEffect(() => {
        async function fetchCities() {
            try {
                setIsLoading(true)
                const res = await fetch(`${BASE_URL}/cities`)
                const data = await res.json()
                setCities(data)
            } catch (err) {
                console.log('There was an error loading data...')
                // throw new Error(err)
            } finally {
                setIsLoading(false)
            }
        }
        fetchCities()
    }, [])
 
    async function getCity(id) {
        try {
            setIsLoading(true)
            const res = await fetch(`${BASE_URL}/cities/${id}`)
            const data = await res.json()
            setCurrentCity(data)
        } catch (err) {
            console.log('There was an error loading data...')
            // throw new Error(err)
        } finally {
            setIsLoading(false)
        }
    }
 
    function getFlag(flag){
 
        if (flag === undefined) return
        let countryCode = Array.from(flag, codeUnit => codeUnit.codePointAt())
       .map(char => String.fromCharCode(char - 127397).toLowerCase()).join('')
 
        return (
         <img src={`https://flagcdn.com/24x18/${countryCode}.png`} alt='flag' />
        )
    }
 
    return (
        <CitiesContext.Provider
            value={{ cities, isLoading, currentCity, getCity, getFlag }}>
            {children}
        </CitiesContext.Provider>
    )
}






now i call it whenever needed like so: (for example in City.jsx)
const { getCity, currentCity, isLoading, getFlag } = useCities()

and return jsx:            

<h3>
   {getFlag(emoji)}
   {cityName}
</h3>